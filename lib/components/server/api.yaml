openapi: 3.1.0
info:
  title: ScoutingApp
  version: '1.1'
  description: ''
servers:
  - url: 'http://localhost:8080'
    description: dev server
paths:
  /sync:
    post:
      summary: Sync
      operationId: sync
      responses:
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                type: object
                properties:
                  teams:
                    type: array
                    items:
                      $ref: '#/components/schemas/Team'
                  matches:
                    type: array
                    items:
                      $ref: '#/components/schemas/Match'
                  form:
                    $ref: '#/components/schemas/ScoutForm'
        '400':
          description: Bad Request
      description: >-
        Syncronize data with the server. Made for use with the scouting
        application on a mobile device or tablet, where scouted data needs to be
        sent to the server, and match and team information needs to be sent
        back.
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ScoutData'
        description: Scouted data
      tags:
        - data
  /query:
    parameters: [ ]
    post:
      summary: Query Scout Data
      operationId: query-data
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ScoutData'
        '400':
          description: Bad Request
      description: >-
        Use this endpoint to send querys to the database. Use URL parameters for
        match ids, match numbers, and team numbers, and use the request body to
        specify keys which should be matched.


        Request body uses [MongoDB query
        operators](https://www.mongodb.com/docs/manual/reference/operator/query/)
        to make more specific queries.


        An empty query will return all data.
      tags:
        - data
      parameters:
        - schema:
            type: string
          in: query
          name: match_id
          description: Match ID
        - schema:
            type: string
          in: query
          name: match
          description: Match Number
        - schema:
            type: string
          in: query
          name: team
          description: Team Number
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties: { }
            examples:
              example-1:
                value:
                  cities-burned:
                    $gte: 1
                  bugs-patched: 187
  /brewCoffee:
    get:
      summary: Teapot
      tags: [ ]
      responses:
        '418':
          description: I'm a teapot (RFC 2324)
          content:
            text/html:
              schema:
                type: string
              examples:
                teapot:
                  value: >-
                    <h1>HTCPCP 418</h1><h2>I'm a teapot</h2>I'm a little
                    teapot,<br>short and stout;<br>Here is my handle,<br>and
                    here is my spout;<br>When I get all steamed up, hear me
                    shout;<br>Tip me over,<br>and pour me out!<br><br><a
                    href="https://datatracker.ietf.org/doc/html/rfc2324">RFC2324</a><br><br><a
                    href="https://github.com/AM2i9">Patrick</a> was here<br>You
                    guys left me to design this, I can add easter eggs :)
      operationId: brew-coffee
      description: ''
      x-internal: true
    parameters: [ ]
  /teams/all:
    get:
      summary: Get all Teams
      tags:
        - teams
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Team'
      operationId: get-teams
      description: Retrieve a list of all teams in the database
    parameters: [ ]
  '/teams/{number}':
    parameters:
      - schema:
          type: string
        name: number
        in: path
        required: true
    get:
      summary: Get Team by number
      tags:
        - teams
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
        '404':
          description: Not Found
      operationId: get-team-by-number
      description: Get a team by team number
  /teams/create:
    post:
      summary: Create Team
      operationId: create-team
      responses:
        '201':
          description: Created
        '400':
          description: Bad Request
      description: Add a team to the database
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Team'
      tags:
        - teams
  /matches:
    get:
      summary: Get Matches
      tags:
        - matches
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Match'
      operationId: get-matches
      description: >-
        Retrieve a list of matches


        `from` and `to` query parameters can be used to retrieve a range of
        matches, for example:

        - `/matches?to=10` to retrieve the first 10 matches

        - `/matches?from=30&to=50` to retrieve matches 30 through 50


        Use the `team` query parameter to specify a team to get matches for, for
        example:

        - `/matches?team=178` to retrieve matches for team 178
      parameters:
        - schema:
            type: integer
          in: query
          name: from
          description: Start of match range
        - schema:
            type: integer
          in: query
          name: to
          description: End of match range
        - schema:
            type: string
          in: query
          name: team
          description: Team number
    parameters: [ ]
  '/matches/id/{id}':
    parameters:
      - schema:
          type: string
          example: 2077cybr_qm0
        name: id
        in: path
        required: true
        description: Match ID
    get:
      summary: Get Match by ID
      tags:
        - matches
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Match'
        '404':
          description: Not Found
      operationId: get-matches-by-id
      description: Get a match by ID
  '/matches/num/{number}':
    parameters:
      - schema:
          type: integer
        name: number
        in: path
        required: true
        description: Match Number
    get:
      summary: Get Match by number
      tags:
        - matches
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Match'
        '404':
          description: Not Found
      operationId: get-matches-by-number
      description: Get match by match number
  /matches/create:
    post:
      summary: Create Match
      operationId: create-match
      responses:
        '201':
          description: Created
        '400':
          description: Bad Request
      description: Create a match
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Match'
      tags:
        - matches
  /forms/all:
    get:
      summary: Get all forms
      tags:
        - forms
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ScoutForm'
      operationId: get-all-forms
      description: Get a list of all forms
  '/forms/{id}':
    get:
      summary: Get form by ID
      tags:
        - forms
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScoutForm'
        '404':
          description: Not Found
      operationId: get-form-by-id
      description: Get a scouting form by ID
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: Form ID
    put:
      summary: Replace form
      operationId: replace-form
      responses:
        '400':
          description: Bad Request
        '404':
          description: Not Found
      description: Replace a form with the specified ID with a new form object
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScoutForm'
        description: ''
      tags:
        - forms
  /forms/create:
    post:
      summary: Create form
      operationId: create-form
      responses:
        '201':
          description: Created
        '400':
          description: Bad Request
      description: Create a scout form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScoutForm'
      tags:
        - forms
  /forms/current:
    get:
      summary: Get current active Form
      tags:
        - forms
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScoutForm'
        '204':
          description: No Content
      operationId: get-current-form
    put:
      summary: Set currently active Form
      operationId: set-current-form
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
        description: Must be the ID of a currently existing ScoutForm
      tags:
        - forms
components:
  schemas:
    FormQuestion:
      type: object
      x-examples:
        example-1:
          id: multi
          title: Multi-Select
          type: multiselect
          options:
            - label: Zero
              value: 0
            - label: One
              value: 1
            - label: Two
              value: 2
            - label: Three
              value: 3
      properties:
        id:
          type: string
        title:
          type: string
        type:
          type: string
          enum:
            - boolean
            - multiselect
            - text
            - number
        options:
          type: array
          items:
            $ref: '#/components/schemas/FormSelectOption'
      required:
        - id
        - title
        - type
      title: ''
      description: ''
    FormSelectOption:
      type: object
      x-examples:
        example-1:
          value: string
          label: string
      properties:
        value:
          type: string
        label:
          type: string
      required:
        - value
        - label
      title: ''
    Match:
      type: object
      x-examples:
        example-1:
          number: 0
          key: 2077cybr_qm0
          redAlliance:
            - 0
            - 1
            - 2
          blueAlliance:
            - 3
            - 4
            - 5
      properties:
        number:
          type: integer
        key:
          type: string
        redAlliance:
          type: array
          items:
            type: integer
        blueAlliance:
          type: array
          items:
            type: integer
      required:
        - number
        - key
        - redAlliance
        - blueAlliance
      description: Represents an FRC match
    ScoutData:
      type: object
      x-examples:
        example-1:
          matchKey: 2077cybr_qm0
          teamNumber: 0
          data:
            cities_burned: 1
      properties:
        matchKey:
          type: string
        teamNumber:
          type: integer
        data:
          type: object
      required:
        - matchKey
        - teamNumber
        - data
      title: ''
      description: Data created and stored by the scouting app and database
    ScoutForm:
      type: object
      x-examples:
        example-1:
          id: cyberpunk-01
          name: Night City District Event Scouting Form
          questions:
            - id: cities_burned
              title: Cities Burned
              type: number
      properties:
        id:
          type: string
        name:
          type: string
        questions:
          type: array
          items:
            $ref: '#/components/schemas/FormQuestion'
      required:
        - id
        - name
      description: A form model to be used to control the app's form from the server
    Team:
      type: object
      x-examples:
        example-1:
          number: 0
          name: Team 0
          robot: { }
      properties:
        number:
          type: integer
        name:
          type: string
        robot:
          type: object
      required:
        - number
        - name
      description: Represents an FRC team
  examples: { }
  requestBodies: { }
  responses: { }
tags:
  - name: data
  - name: forms
  - name: matches
  - name: teams